---
name: Artifact Cleanup

on:
    workflow_dispatch:
        inputs:
            image_path:
                description: Full Artifact Registry image path (e.g. us-west1-docker.pkg.dev/PROJECT_ID/REPO/IMAGE)
                required: true
    push:
        branches:
            - '**FIT**'

jobs:
    cleanup-images:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 3

            - name: Authenticate to Google Cloud
              uses: google-github-actions/auth@v2
              with:
                  credentials_json: ${{ secrets.GCP_SA_KEY }}

            - name: Set up Cloud SDK
              uses: google-github-actions/setup-gcloud@v2
              with:
                  project_id: ${{ secrets.PROJECT_ID }}
                  version: latest

            - name: Clean up untagged images
              run: |
                  # Set image paths
                  if [ -z "${{ github.event.inputs.image_path }}" ]; then
                    # Default paths for push events
                    APP_IMAGE_PATH="us-west1-docker.pkg.dev/${{ secrets.PROJECT_ID }}/fitnessllm-dp/fitnessllm-dp"
                    BASE_IMAGE_PATH="us-west1-docker.pkg.dev/${{ secrets.PROJECT_ID }}/fitnessllm-dp/base"
                  else
                    # Use provided image path for manual cleanup
                    APP_IMAGE_PATH="${{ github.event.inputs.image_path }}"
                    BASE_IMAGE_PATH=""
                  fi

                  # Clean up app images
                  echo "DEBUG: Listing all app images..."
                  APP_IMAGES=$(gcloud artifacts docker images list "$APP_IMAGE_PATH" --include-tags --sort-by=~CREATE_TIME)
                  echo "DEBUG: App images found:"
                  echo "$APP_IMAGES"

                  if [[ -n "$APP_IMAGES" ]]; then
                    echo "Found app images, cleaning up untagged versions..."
                    # Process all images, looking for untagged ones
                    echo "$APP_IMAGES" | tail -n +2 | while read -r line; do
                      if [[ -n "$line" ]]; then
                        digest=$(echo "$line" | awk '{print $2}')
                        tags=$(echo "$line" | awk '{print $3}')
                        if [[ -z "$tags" || "$tags" == "-" ]]; then
                          echo "Deleting untagged app digest: $digest"
                          gcloud artifacts docker images delete "$APP_IMAGE_PATH@$digest" --quiet || true
                        fi
                      fi
                    done
                  else
                    echo "No app images found to clean up"
                  fi

                  # Only clean up base images if we're in push event mode
                  if [[ -n "$BASE_IMAGE_PATH" ]]; then
                    echo "DEBUG: Listing all base images..."
                    BASE_IMAGES=$(gcloud artifacts docker images list "$BASE_IMAGE_PATH" --include-tags --sort-by=~CREATE_TIME)
                    echo "DEBUG: Base images found:"
                    echo "$BASE_IMAGES"

                    if [[ -n "$BASE_IMAGES" ]]; then
                      echo "Found base images, cleaning up untagged versions..."
                      # Process all images, looking for untagged ones
                      echo "$BASE_IMAGES" | tail -n +2 | while read -r line; do
                        if [[ -n "$line" ]]; then
                          digest=$(echo "$line" | awk '{print $2}')
                          tags=$(echo "$line" | awk '{print $3}')
                          if [[ -z "$tags" || "$tags" == "-" ]]; then
                            echo "Deleting untagged base digest: $digest"
                            gcloud artifacts docker images delete "$BASE_IMAGE_PATH@$digest" --quiet || true
                          fi
                        fi
                      done
                    else
                      echo "No base images found to clean up"
                    fi
                  fi
